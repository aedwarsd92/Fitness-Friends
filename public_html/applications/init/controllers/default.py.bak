# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

#########################################################################
## This is a samples controller
## - index is the default action of any application
## - user is required for authentication and authorization
## - download is for downloading files uploaded in the db (does streaming)
## - call exposes all registered services (none by default)
#########################################################################

@auth.requires_login()
def index():
   redirect(URL('home'))

##def index():

    ## if user is already logged in, redirect to the user home page.
##    if auth.user:
##        redirect(URL(r=request, f='home'))  
##    else:
##        redirect(URL(r=request, f='user'))

##    form = auth()        
##    return dict(form = form)

def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    """

    return dict(form=auth())

## Users home page.
@auth.requires_login()
def home():

    db.challenges.name.represent = lambda name, row: A(name, _href=URL('home'))
    
    ## get the challenges the users is currently enrolled in
    query = db.challenges.participants == auth.user.id
    challenges = db(query).select(orderby=db.challenges.name)

    return dict(challenges=challenges)

def create_challenge():

    form = SQLFORM(db.challenges)

    return dict(form = form)

def view_challenge():

    chall_id= request.vars.challenge
    chall_query = db.challenges.id == chall_id
    challenge = db(chall_query).select().first()
    
    form = SQLFORM(db.challenges, challenge)

    return dict(form = form)

def search():

    ## get all challenges

    challenges = db(db.challenges).select(orderby=db.challenges.name)

    return dict(challenges=challenges)
        
def contact():

    return dict()

def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request,db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()


@auth.requires_signature()
def data():
    """
    http://..../[app]/default/data/tables
    http://..../[app]/default/data/create/[table]
    http://..../[app]/default/data/read/[table]/[id]
    http://..../[app]/default/data/update/[table]/[id]
    http://..../[app]/default/data/delete/[table]/[id]
    http://..../[app]/default/data/select/[table]
    http://..../[app]/default/data/search/[table]
    but URLs bust be signed, i.e. linked with
      A('table',_href=URL('data/tables',user_signature=True))
    or with the signed load operator
      LOAD('default','data.load',args='tables',ajax=True,user_signature=True)
    """
    return dict(form=crud())
