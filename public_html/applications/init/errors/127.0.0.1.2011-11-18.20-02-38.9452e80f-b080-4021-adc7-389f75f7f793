(dp1
S'output'
p2
S''
sS'layer'
p3
S'P:\\Workbench\\DevEnv\\web2py\\applications\\init\\controllers/default.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n##### Page Functions #####\n@auth.requires_login()\ndef index():\n   redirect(URL(\'home\'))\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n\n    return dict(form=auth())\n\n## Users home page.\n@auth.requires_login()\ndef home():\n\n    db.events.name.represent = lambda name, row: A(name, _href=URL(\'home\'))\n        \n    ## get the challenges the users is currently enrolled in\n    query = db.events.participants.contains(auth.user.id)\n    events = db(query).select(orderby=db.events.name)\n\n    return dict(events=events)\n\n@auth.requires_login()\ndef create_challenge():\n\n    form = SQLFORM(db.events)\n    \n    if form.process(session=None, onvalidation=date_compare, formname=\'create_challenge\').accepted:\n        response.flash = \'form accepted\'\n        redirect(URL(\'home\'))\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill the form\'\n\n    return dict(form = form)\n    \n## View the details of a challenge        \n@auth.requires_login()\ndef challenge():\n\n    event_id= request.vars.event\n    event_query = db.events.id == event_id\n    form= db(event_query).select().first()\n    \n    users = get_users(event_id)\n    count = 0\n    for user in users:\n        count = count + 1\n    \n    form.writable = False\n\n    return dict(form=form, users=users, count=count)\n\n@auth.requires_login()\ndef search():\n\n    ## get all challenges\n\n    events = db(db.events).select(orderby=db.events.name)\n\n    return dict(events=events)\n        \ndef contact():\n\n    return dict()\n    \n##### Utility Functions #####    \n\ndef get_users(event_id):\n\n    user_query = db.event_status.event == event_id\n    users = db(user_query).select()\n    \n    return (users)\n    \n    \n# Make sure Start Date is less then End Date\ndef date_compare(form):\n    if form.vars.start_date > form.vars.end_date:\n        form.errors.end_date = \'End Date must be after Start Date\'\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs bust be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(challenge)\n'
p6
sS'snapshot'
p7
(dp8
sS'traceback'
p9
S'Traceback (most recent call last):\n  File "P:\\Workbench\\DevEnv\\web2py\\gluon\\restricted.py", line 192, in restricted\n    exec ccode in environment\n  File "P:\\Workbench\\DevEnv\\web2py\\applications\\init\\controllers/default.py", line 133, in <module>\n  File "P:\\Workbench\\DevEnv\\web2py\\gluon\\globals.py", line 149, in <lambda>\n    self._caller = lambda f: f()\n  File "P:\\Workbench\\DevEnv\\web2py\\gluon\\tools.py", line 2473, in f\n    return action(*a, **b)\n  File "P:\\Workbench\\DevEnv\\web2py\\applications\\init\\controllers/default.py", line 61, in challenge\n    users = get_users(event_id)\n  File "P:\\Workbench\\DevEnv\\web2py\\applications\\init\\controllers/default.py", line 87, in get_users\n    user_query = db.event_status.event == event_id\n  File "P:\\Workbench\\DevEnv\\web2py\\gluon\\dal.py", line 4577, in __getattr__\n    return self[key]\n  File "P:\\Workbench\\DevEnv\\web2py\\gluon\\dal.py", line 4571, in __getitem__\n    return dict.__getitem__(self, str(key))\nKeyError: \'event_status\'\n'
p10
s.